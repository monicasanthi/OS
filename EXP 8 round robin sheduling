#include <stdio.h>
#define MAX_PROCESSES 10
struct Process {
    int process_id;
    int burst_time;
    int remaining_time;
};
void roundRobin(struct Process processes[], int n, int time_quantum) {
    int total_time = 0;
    int remaining_processes = n;
    for (int i = 0; i < n; i++) {
        total_time += processes[i].burst_time;
        processes[i].remaining_time = processes[i].burst_time;
    }
    int current_time = 0;
    while (remaining_processes > 0) {
        for (int i = 0; i < n; i++) {
            if (processes[i].remaining_time > 0) {
                int execution_time = (processes[i].remaining_time < time_quantum) ? processes[i].remaining_time : time_quantum;
                processes[i].remaining_time -= execution_time;
                current_time += execution_time;
                printf("Process %d executes for %d units of time.\n", processes[i].process_id, execution_time);
                if (processes[i].remaining_time == 0) {
                    remaining_processes--;
                    printf("Process %d completed.\n", processes[i].process_id);
                }
            }
        }
    }
    printf("Total execution time: %d\n", total_time);
}
int main() {
    int n, time_quantum;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    if (n > MAX_PROCESSES || n <= 0) {
        printf("Invalid number of processes. Please enter a number between 1 and %d.\n", MAX_PROCESSES);
        return 1;
    }
    struct Process processes[MAX_PROCESSES];
    for (int i = 0; i < n; i++) {
        processes[i].process_id = i + 1;
        printf("Enter the burst time for process %d: ", processes[i].process_id);
        scanf("%d", &processes[i].burst_time);
    }
    printf("Enter the time quantum: ");
    scanf("%d", &time_quantum);
    roundRobin(processes, n, time_quantum);
    return 0;
}
